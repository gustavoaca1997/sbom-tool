<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <AssemblyName>Microsoft.Sbom.Targets</AssemblyName>
    <RuntimeIdentifiers>win-x64;osx-x64;linux-x64</RuntimeIdentifiers>
    <IsPublishable>true</IsPublishable>
    <Description>Tasks and targets for running the SBOM tool.</Description>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net6.0|AnyCPU'">
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net8.0|AnyCPU'">
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net6.0|AnyCPU'">
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0|AnyCPU'">
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Utilities.Core" />
    <PackageReference Include="Microsoft.Extensions.Hosting" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Microsoft.Sbom.Extensions.DependencyInjection\Microsoft.Sbom.Extensions.DependencyInjection.csproj" />
    <ProjectReference Include="..\Microsoft.Sbom.Tool\Microsoft.Sbom.Tool.csproj" />
  </ItemGroup>

<!-- TODO temp for testing 

    Eventually the .NET SDK team will add logic similar to this when integrating with the nuget package we produce. 
    For testing purposes, in order to run the `GenerateSbom` target that lives in the `SbomExecution.targets` file,
    we can include it explicitly in this project so that MSBuild knows about it and can run it as part of any
    `dotnet` or `msbuild` commands.
    
    This is an initial, hacky testing strategy that can be used when first implementing the task/ target. Once we
    are producing a nuget package that includes the final version of these tasks/ targets, we will want to test 
    with other, test .NET projects. Roughly, this will be done by:
      - Creating a new, standalone test dotnet project
      - Adding a package reference to the package being produced from this repo, which includes the task/ target
      - Add these import commands, replacing the relative path with the path to the referenced nuget package (this
        step is mocking what the .NET SDK will eventaully implent on their side)
      - Run dotnet/ msbuild commands that we expect to trigger SBOM generation and ensure that SBOMs are generated
        as expected.

    Note: If you see file locked errors when running the build, it is likely because the GenerateSbom target is
    attempting to access a .dll that was just built and is still locked. This can be worked around by copying
    the built dll to an alternate directory and updating the target to point to the new dll by updating line 3
    in `SbomExecution.targets`. -->
  <Import Project="./SbomExecution.props" />
  <Import Project="./SbomExecution.targets" />
</Project>
